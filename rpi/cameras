#!/bin/bash -m

source camera-functions.sh

function usage() {
    cat << EOF
./$SCRIPT

   Control all the cameras. Define IDS to control a subset.

    help: print this message
    list: list all the camera ids and addresses
    set-hostname <ip> <id>: setup hostname and SSH at <ip> as camera <id>
    ssh-copy-id: copy SSH key from this machine to each camera
    ping: check connection to all cameras (uses SSH)
    exec: execute command via ssh on all cameras
    ssh <id>: helper to ssh into specific camera
    download <path>: download directory from each camera
    status: display info and recent logfile for all cameras
    shutdown: shutdown all cameras
    reboot: reboot all cameras
    update: rsync code and install arducam library on all cameras
    start/stop/restart/enable/disable: systemctl * vibecheck
EOF
   exit
}

if [ $# -eq 0 ]; then
   usage
fi

# these are cases that do not require IDs
case "$1" in
help)
    usage
;;
list)
    for ID in $IDS; do
        ADDRESS=`get_address $ID`
        AT=`get_at $ID`
        echo $ID $ADDRESS
    done
    exit
esac

if [ ! -e "$SSH_FILE" ]; then
    echo "Couldn't find $SSH_FILE"
    echo "Try running ssh-keygen first"
    exit
fi

# these are cases that operate on a specific device
case "$1" in
set-hostname)
    if [ "$#" -ne 3 ]; then
        echo "Example: ./$SCRIPT set-hostname 192.168.0.150 0"
        usage
    fi

    IP=$2
    ID=$3
    AT=pi@$IP
    ssh-copy-id -i $SSH_FILE $AT
    HOSTNAME=$HOSTNAME_PREFIX$ID
    # it takes four separate commands to fully set the hostname
    # "sudo: unable to resolve host..." is not an error, just intermediate
    # final command restarts the mdns server
    ssh $AT "sudo sed -i \"s/0\.1\.1.*/0.1.1\t$HOSTNAME/g\" /etc/hosts &&\
        sudo hostnamectl set-hostname $HOSTNAME &&\
        sudo hostname $HOSTNAME &&\
        echo $HOSTNAME | sudo tee /etc/hostname &&\
        sudo systemctl restart avahi-daemon"
    exit
;;
ssh)
    ID=$2
    AT=`get_at $ID`
    ssh $AT
    exit
;;
esac

# checking command validity
case "$1" in
    ping) ;;
    exec) ;;
    shutdown) ;;
    reboot) ;;
    update) ;;
    status) ;;
    pingtime) ;;
    enable) ;;
    disable) ;;
    start) ;;
    stop) ;;
    restart) ;;
    ssh-copy-id) ;;
    download) ;;
    *)
        echo "Invalid command"
        usage
    ;;
esac

# sequential commands
for ID in $IDS; do
    AT=`get_at $ID`
    case "$1" in
    ssh-copy-id)
        ssh-copy-id -i $SSH_FILE $AT
    ;;
    esac
done

# parallel commands
for ID in $IDS; do
{
    ADDRESS=$HOSTNAME_PREFIX$ID$HOSTNAME_SUFFIX
    AT=pi@$ADDRESS
    PREFIX=`printf "%2s" $ID`

    # check if the device is online before continuing
    ssh -q \
        -o BatchMode=yes \
        -o StrictHostKeyChecking=no \
        -o ConnectTimeout=1 \
        $AT \
        'exit 0'
    if [ $? -ne 0 ]
    then
        ping -W1 -c1 $ADDRESS &> /dev/null
        if [ $? -ne 0 ]
        then
            echo "$PREFIX down"
        else
            echo "$PREFIX up, cannot ssh"
        fi
    else
        case "$1" in
        ping)
            echo "$PREFIX up"
        ;;
        exec)
            ssh $AT "${@:2}"
        ;;
        shutdown)
            ssh $AT "/sbin/shutdown now"
        ;;
        reboot)
            ssh $AT "/sbin/shutdown --reboot now"
        ;;
        pingtime)
            HOSTNAME=$(hostname)
            ssh $AT 'RTT=`ping -c4 -i0.2 '$HOSTNAME'.local | grep rtt` &&\
                echo '$ID' $RTT'
        ;;
        status) 
            ssh $AT 'TEMP=`vcgencmd measure_temp|cut -d= -f2` ;\
                CPU_MEM=`ps --no-headers -eo cmd,%cpu,%mem --sort=-%cpu|head -n1|cut -d" " -f4-` ;\
                ACTIVE=`systemctl is-active vibecheck` ;\
                STATUS=`tail -n1 /var/log/vibecheck.log` ;\
                ERR_STATUS=`tail -n1 /var/log/vibecheck.err.log` ;\
                echo '$ID' $ACTIVE $TEMP $CPU_MEM $STATUS / $ERR_STATUS'
        ;;
        update)
            rsync -a \
                --exclude=.DS_Store \
                --exclude=__pycache__ \
                --delete \
                camera/ $AT:~/$ROOT_NAME/
            rsync -a config/$ID.json $AT:~/$ROOT_NAME/config.json
            ssh $AT 'sudo install -m 644 camera/libarducam_mipicamera.so /usr/lib/'
            echo $ID 'updated'
        ;;
        enable)
            ssh $AT "systemctl enable vibecheck"
        ;;
        disable)
            ssh $AT "systemctl disable vibecheck"
        ;;
        start)
            ssh $AT "systemctl start vibecheck"
        ;;
        stop)
            ssh $AT "systemctl stop vibecheck"
        ;;
        restart)
            ssh $AT "systemctl restart vibecheck"
        ;;
        download)
            if [ "$#" -ne 2 ]; then
                echo "Example: ./$SCRIPT download /home/pi/reference/"
                usage
            fi

            REMOTE_DIR=$2
            LOCAL_DIR=download/$ID
            mkdir -p $LOCAL_DIR
            rsync -a $AT:$REMOTE_DIR $LOCAL_DIR
        ;;
        esac
    fi
} &
done
wait
